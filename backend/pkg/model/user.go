package model

import (
	"database/sql"
	"gorm.io/gorm"
	"time"
)

// User represents a user which can log in (obviously)
type User struct {
	// ID is generated by firebase (in the best case)
	ID string `gorm:"primaryKey"`
	// Name is the username which is displayed in the frontend
	Name string
	// CreatedAt is the time when the entry was first created
	CreatedAt time.Time
	// UpdatedAt is the time when the entry was modified
	UpdatedAt time.Time
	// DeletedAt is the time when the entry was (soft-) removed
	DeletedAt gorm.DeletedAt `gorm:"index"`
	// OwnerProjects contains a list of all projects the user is owner of
	OwnerProjects []Project `gorm:"foreignKey:OwnerID"`
	// UserProjects contains a list of all projects the user has access to
	UserProjects []Project `gorm:"many2many:user_projects;"`
}

// Comment represents a comment in a topic
type Comment struct {
	gorm.Model
	// AuthorID is the id of the author of the comment
	AuthorID string
	// Author is the author of the comment
	Author User
	// Content is the comment content as markdown
	Content string
	// TopicID is the ID of the topic the comment belongs to
	TopicID uint
}

// Topic represents a ToDo-Point for the meeting
type Topic struct {
	gorm.Model
	// Title of the topic
	Title string
	// Description of the topic
	Description string
	// ID of the creator of the topic
	CreatorID string
	// Creator of the topic
	Creator User
	// Comments in the topic
	Comments []Comment
	// SolutionID is the ID of the comment which represents the solution of this topic
	SolutionID uint
	// Solution is the comment which represents the solution of this topic
	Solution Comment
	// ClosedAt represents the time when the topic was resolved (if valid)
	ClosedAt sql.NullTime
	// ForceSolution requires a solution to be able to close topic if true
	ForceSolution bool
	// MeetingID is the ID of the meeting the topic belongs to
	MeetingID uint
}

// Meeting represents a meeting (who would've guessed)
type Meeting struct {
	gorm.Model
	// Name if the meeting
	Name string
	// StartDate of the meeting
	StartDate time.Time
	// Topics of the meeting
	Topics []Topic
	// ProjectID is the project the meeting belongs to
	ProjectID uint
}

// Project is a custom "realm" where meetings are saved
type Project struct {
	gorm.Model
	// Name is the name of the project and displayed in the frontend
	Name string
	// Description of the project
	Description string
	// PreviewURL is the display image
	PreviewURL string
	// OwnerID is the id of the creator of the project
	OwnerID string
	// Owner is the creator of the project
	Owner User
	// Users contains all users which have access to the project
	Users []User `gorm:"many2many:user_projects;"`
	// Meetings contains all meetings in the project
	Meetings []Meeting
}
